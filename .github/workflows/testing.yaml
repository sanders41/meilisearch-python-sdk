name: Testing

on:
  push:
    branches:
      - main
  pull_request:
env:
  UV_CACHE_DIR: /tmp/.uv-cache
  PYTHON_VERSION: "3.9"
jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: install Just
        uses: taiki-e/install-action@just
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      - name: Install Dependencies
        run: just install
      - name: mypy check
        run: just mypy
      - name: Minimize uv cache
        run: uv cache prune --ci

  parallel-testing:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13-dev"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: install Just
        uses: taiki-e/install-action@just
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      - name: Install Dependencies
        run: just install
      - name: Test with pytest
        run: just test-parallel-ci
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
      - name: Minimize uv cache
        run: uv cache prune --ci

  parallel-testing-http2:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13-dev"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: install Just
        uses: taiki-e/install-action@just
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      - name: Install Dependencies
        run: just install
      - name: Install truststore
        if: ${{ ! startsWith(matrix.python-version, '3.9') }}
        run: uv pip install truststore
      - name: Install ssl requirements
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-tools build-essential gcc
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          brew install mkcert
          mkcert -install
          mkcert -key-file meilisearch.key -cert-file meilisearch.crt localhost 127.0.0.1 ::1
      - name: Test with pytest
        run: just test-parallel-ci-http2
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
      - name: Minimize uv cache
        run: uv cache prune --ci

  no-parallel-testing:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13-dev"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: install Just
        uses: taiki-e/install-action@just
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      - name: Install Dependencies
        run: just install
      - name: Test with pytest
        run: just test-no-parallel-ci
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
      - name: Minimize uv cache
        run: uv cache prune --ci

  no-parallel-testing-http2:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13-dev"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: install Just
        uses: taiki-e/install-action@just
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      - name: Install Dependencies
        run: just install
      - name: Install truststore
        if: ${{ ! startsWith(matrix.python-version, '3.9') }}
        run: uv pip install truststore
      - name: Install ssl requirements
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-tools build-essential gcc
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          brew install mkcert
          mkcert -install
          mkcert -key-file meilisearch.key -cert-file meilisearch.crt localhost 127.0.0.1 ::1
      - name: Test with pytest
        run: just test-no-parallel-ci-http2
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
      - name: Minimize uv cache
        run: uv cache prune --ci
  example-testing:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13-dev"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: install Just
        uses: taiki-e/install-action@just
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      - name: Test with pytest
        run: just test-examples-ci
      - name: Minimize uv cache
        run: uv cache prune --ci

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: install Just
        uses: taiki-e/install-action@just
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      - name: Install Dependencies
        run: just install
      - name: Test Docs Build
        run: just build-docs
      - name: Minimize uv cache
        run: uv cache prune --ci
